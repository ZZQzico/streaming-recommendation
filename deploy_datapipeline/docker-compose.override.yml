version: '3.9'

services:
  kafka:
    image: bitnami/kafka:latest
    #platform: linux/arm64
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_KRAFT_CLUSTER_ID=kraft-cluster
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  kafka-init:
    image: bitnami/kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        sleep 10 && \
        kafka-topics.sh --create --if-not-exists \
        --bootstrap-server kafka:9092 \
        --replication-factor 1 \
        --partitions 1 \
        --topic user_behavior

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"

  fastapi:
    build:
      context: .
      dockerfile: Dockerfile.api_service
    container_name: fastapi-server
    ports:
      - "8000:8000"
    volumes:
      - ./data_processing:/mnt/project_volume/data
      - ./.env:/app/.env
    environment:
      - ENV_FILE=/app/.env
    depends_on:
      kafka-init:
        condition: service_started
      kafka:
        condition: service_healthy
      redis:
        condition: service_started

  spark:
    build:
      context: .
      dockerfile: Dockerfile.spark_stream
    container_name: spark-consumer
    volumes:
      - ./data_processing:/mnt/project_volume/data
      - ./.env:/app/.env
    environment:
      - ENV_FILE=/app/.env
    depends_on:
      kafka-init:
        condition: service_started
      kafka:
        condition: service_healthy
      redis:
        condition: service_started